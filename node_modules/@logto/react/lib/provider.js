import { jsx } from 'react/jsx-runtime';
import LogtoClient from '@logto/browser';
import { useState, useMemo, useCallback, useEffect } from 'react';
import { LogtoContext } from './context.js';

const LogtoProvider = ({ config, LogtoClientClass = LogtoClient, children, unstable_enableCache = false, }) => {
    const [loadingCount, setLoadingCount] = useState(1);
    const memorizedLogtoClient = useMemo(() => ({ logtoClient: new LogtoClientClass(config, unstable_enableCache) }), [LogtoClientClass, config, unstable_enableCache]);
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [error, setError] = useState();
    const isLoading = useMemo(() => loadingCount > 0, [loadingCount]);
    const setIsLoading = useCallback((state) => {
        if (state) {
            setLoadingCount((count) => count + 1);
        }
        else {
            setLoadingCount((count) => Math.max(0, count - 1));
        }
    }, [setLoadingCount]);
    useEffect(() => {
        (async () => {
            const isAuthenticated = await memorizedLogtoClient.logtoClient.isAuthenticated();
            setIsAuthenticated(isAuthenticated);
            setLoadingCount((count) => Math.max(0, count - 1));
        })();
    }, [memorizedLogtoClient]);
    const memorizedContextValue = useMemo(() => ({
        ...memorizedLogtoClient,
        isAuthenticated,
        setIsAuthenticated,
        isLoading,
        setIsLoading,
        error,
        setError,
    }), [memorizedLogtoClient, isAuthenticated, isLoading, setIsLoading, error]);
    return jsx(LogtoContext.Provider, { value: memorizedContextValue, children: children });
};

export { LogtoProvider };
