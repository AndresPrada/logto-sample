import type LogtoClient from '@logto/browser';
import { type Optional } from '@silverhand/essentials';
type OptionalPromiseReturn<T> = {
    [K in keyof T]: T[K] extends (...args: infer A) => Promise<infer R> ? (...args: A) => Promise<Optional<R>> : T[K];
};
type Logto = {
    isAuthenticated: boolean;
    isLoading: boolean;
    error?: Error;
} & OptionalPromiseReturn<Pick<LogtoClient, 'getRefreshToken' | 'getAccessToken' | 'getAccessTokenClaims' | 'getOrganizationToken' | 'getOrganizationTokenClaims' | 'getIdToken' | 'getIdTokenClaims' | 'signOut' | 'fetchUserInfo' | 'clearAccessToken' | 'clearAllTokens'>> & Pick<LogtoClient, 'signIn'>;
declare const useHandleSignInCallback: (callback?: () => void) => {
    isLoading: boolean;
    isAuthenticated: boolean;
    error: Error | undefined;
};
declare const useLogto: () => Logto;
export { useLogto, useHandleSignInCallback };
